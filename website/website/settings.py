"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

import django_on_heroku
from dotenv import load_dotenv


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Load environmental variables from .env file.
dotenv_file = os.path.join(BASE_DIR, "../.env")
if os.path.isfile(dotenv_file):
    load_dotenv(dotenv_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(os.environ.get("DEBUG", False))

ALLOWED_HOSTS = [
    "localhost",
    "127.0.0.1",
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "users",
    "images",
    "storages",
    "django_cleanup.apps.CleanupConfig",
    "django_extensions",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "dj_rest_auth.jwt_auth.JWTCookieAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "USER_DETAILS_SERIALIZER": "users.serializers.UserDetailsSerializer",
    "DEFAULT_PAGINATION_CLASS": 'rest_framework.pagination.PageNumberPagination',
    "PAGE_SIZE": 2,
    "DEFAULT_THROTTLE_CLASSES": (
        'images.throttles.AnonymousBurstThrottle',
        'images.throttles.AnonymousSustainedThrottle',
        'images.throttles.OriginalImgLinkBurstThrottle',
        'images.throttles.OriginalImgLinkSustainedThrottle',
        'images.throttles.ThumbnailLinkBurstThrottle',
        'images.throttles.ThumbnailLinkSustainedThrottle',
        'images.throttles.PostImageUserBurstThrottle',
        'images.throttles.PostImageUserSustainedThrottle',
        'images.throttles.PostImageUserBurstThrottle',
        'images.throttles.GetImagesUserSustainedThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ),
    "DEFAULT_THROTTLE_RATES": {
        'anonymous_burst_throttle': '8/hour',
        'anonymous_sustained_throttle': '20/day',
        'original_img_link_burst_throttle': '20/hour',  # 20/hour
        'original_img_link_sustained_throttle': '60/day',  # 60/day
        'thumbnail_link_burst_throttle': '20/hour',  # 20/hour
        'thumbnail_link_sustained_throttle': '80/day',  # 80/day
        'post_image_user_burst_throttle': '15/hour',
        'post_image_user_sustained_throttle': '50/day',
        'get_images_user_burst_throttle': '40/hour',
        'get_images_user_sustained_throttle': '150/day',
        'dj_rest_auth': '4/min'
    }
}


ROOT_URLCONF = "website.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "website.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CSRF_TRUSTED_ORIGINS = ["https://bsski-images-api.herokuapp.com"]


# Security headers configuration
CSRF_COOKIE_SECURE = int(os.environ.get("CSRF_COOKIE_SECURE", True))
SESSION_COOKIE_SECURE = int(os.environ.get("SESSION_COOKIE_SECURE", True))


# Heroku configuration
django_on_heroku.settings(locals(), test_runner=False)

if "OPTIONS" in DATABASES["default"]:
    del DATABASES["default"]["OPTIONS"]["sslmode"]


# SemaphoreCI configuration
if "CI" in os.environ:
    DATABASES["default"]["TEST"] = {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "test.db",
    }


# JWT configuration
REST_USE_JWT = True
JWT_AUTH_COOKIE = "images-api-auth"
JWT_AUTH_REFRESH_COOKIE = "images-api-refresh-auth"


# Custom user model configuration
AUTH_USER_MODEL = "users.User"
ACCOUNT_EMAIL_REQUIRED = False


# Media configuration
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# AWS configuration
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
AWS_S3_ADDRESSING_STYLE = os.environ.get("AWS_S3_ADDRESSING_STYLE")
AWS_S3_SIGNATURE_VERSION = os.environ.get("AWS_S3_SIGNATURE_VERSION")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_THUMBNAILS_STORAGE_BUCKET_NAME = os.environ.get(
    "AWS_THUMBNAILS_STORAGE_BUCKET_NAME"
)
DEFAULT_FILE_STORAGE = os.environ.get("DEFAULT_FILE_STORAGE")
AWS_S3_FILE_OVERWRITE = True
